import pandas as pd
import numpy as np
import sys
import torch
import torch.nn as nn
import torch.optim as optim
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import mean_absolute_error

# Define the column names
CATEGORIES = np.array(['Status', 'Brand', 'Model', 'CPU', 'RAM', 'Storage', 'Storage type', 'GPU', 'Screen', 'Touch', 'Final Price'])

# Define a simple neural network model
class PricePredictorNN(nn.Module):
    def __init__(self, input_size):
        super(PricePredictorNN, self).__init__()
        self.layer1 = nn.Linear(input_size, 64)
        self.layer2 = nn.Linear(64, 32)
        self.output_layer = nn.Linear(32, 1)
        self.activation = nn.ReLU()
    
    def forward(self, x):
        x = self.activation(self.layer1(x))
        x = self.activation(self.layer2(x))
        x = self.output_layer(x)
        return x

def main():
    if len(sys.argv) != 2:
        print("Usage: python script.py <datafile.csv>")
        sys.exit()
    
    encoders, features, prices = load_data(sys.argv[1])
    X_train, X_test, y_train, y_test = train_test_split(features, prices, test_size=0.1)
    
    model = train_model(X_train, y_train)
    evaluate_model(model, X_test, y_test)
    
    while True:
        print("\nEnter the specifications of the laptop you want to predict:")
        new_laptop = get_user_input()
        predicted_price = predict_price(model, new_laptop, encoders)
        print(f'Predicted Laptop Price: ${predicted_price:.2f}')
        
        another = input("Would you like to predict another laptop? (yes/no): ")
        if another.lower() != 'yes':
            break

def load_data(filename):
    df = pd.read_csv(filename, usecols=CATEGORIES)
    df.fillna({'GPU': 0, 'Storage type': 'SSD', 'Screen': df['Screen'].mean()}, inplace=True)
    encoders = {}
    
    for col in CATEGORIES[:-1]:
        encoders[col] = LabelEncoder()
        df[col] = encoders[col].fit_transform(df[col].astype(str))
    
    features = df.iloc[:, :-1].to_numpy()
    prices = df.iloc[:, -1].to_numpy()
    return encoders, features, prices

def train_model(X_train, y_train):
    input_size = X_train.shape[1]
    model = PricePredictorNN(input_size)
    
    criterion = nn.MSELoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    X_train_tensor = torch.tensor(X_train, dtype=torch.float32)
    y_train_tensor = torch.tensor(y_train, dtype=torch.float32).view(-1, 1)
    
    epochs = 100
    for epoch in range(epochs):
        model.train()
        optimizer.zero_grad()
        predictions = model(X_train_tensor)
        loss = criterion(predictions, y_train_tensor)
        loss.backward()
        optimizer.step()
        
        if epoch % 10 == 0:
            print(f'Epoch {epoch}/{epochs}, Loss: {loss.item():.4f}')
    
    return model

def evaluate_model(model, X_test, y_test):
    model.eval()
    X_test_tensor = torch.tensor(X_test, dtype=torch.float32)
    with torch.no_grad():
        y_pred = model(X_test_tensor).squeeze().numpy()
    mae = mean_absolute_error(y_test, y_pred)
    print(f'Mean Absolute Error (MAE): {mae}')

def get_user_input():
    user_data = []
    for col in CATEGORIES[:-1]:
        user_insert = input(f"Enter laptop {col}: ")
        user_data.append(user_insert)
    return np.array(user_data)

def predict_price(model, new_laptop, encoders):
    encoded_values = []
    for i, col in enumerate(CATEGORIES[:-1]):
        encoded_values.append(encoders[col].transform([str(new_laptop[i])])[0])
    
    input_data = torch.tensor([encoded_values], dtype=torch.float32)
    model.eval()
    with torch.no_grad():
        predicted_price = model(input_data).item()
    return predicted_price

if __name__ == "__main__":
    main()
